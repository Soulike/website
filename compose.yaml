# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
    blog:
        restart: always
        image: 'soulike/blog:latest'
        depends_on:
            - nginx
            - blog-server
        ports:
            - '3000:3000'
    admin:
        restart: always
        image: 'soulike/admin:latest'
        depends_on:
            - nginx
            - admin-server
            - auth-server
        ports:
            - '3001:3000'
    auth-server:
        restart: always
        image: 'soulike/auth-server:latest'
        ports:
            - 4001:4001
        depends_on:
            - redis
            - database-server
        network_mode: host
    admin-server:
        restart: always
        image: 'soulike/admin-server:latest'
        ports:
            - 4003:4003
        volumes:
            - /home/soulike/.blog-data:/.blog-data
        depends_on:
            - redis
            - database-server
        network_mode: host
    blog-server:
        restart: always
        image: 'soulike/blog-server:latest'
        ports:
            - 4004:4004
        volumes:
            - /home/soulike/.blog-data:/.blog-data:ro
        depends_on:
            - redis
            - database-server
        network_mode: host
    database-server:
        restart: always
        image: 'soulike/database-server:latest'
        ports:
            - 4000:4000
        depends_on:
            - redis
        network_mode: host
    nginx:
        restart: always
        image: 'soulike/website-nginx:latest'
        volumes:
            - /home/soulike/ssl:/ssl:ro
            - ./nginx/logs:/var/log/nginx
        network_mode: host # TODO: Add backend into this file and use bridge mode settings
    redis:
        restart: always
        image: redis:alpine
        network_mode: host
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

